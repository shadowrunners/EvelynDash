generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "mongodb"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

type GuildsAntiphishing {
  enabled Boolean
}

type GuildsAntiscam {
  /// Could not determine type: the field only had null or empty values in the sample set.
  channels Json?
}

type GuildsBlacklist {
  isBlacklisted Boolean
  reason        String
  time          String
}

type GuildsConfessions {
  channel String
  enabled Boolean
  webhook GuildsConfessionsWebhook
}

type GuildsConfessionsWebhook {
  id    String
  token String
}

type GuildsGoodbye {
  channel String
  embed   GuildsGoodbyeEmbed
  enabled Boolean
}

type GuildsGoodbyeEmbed {
  author         GuildsGoodbyeEmbedAuthor
  color          String
  content        String
  description    String
  footer         GuildsGoodbyeEmbedFooter
  image          String
  messagecontent String
  thumbnail      String
  title          String
}

type GuildsGoodbyeEmbedAuthor {
  iconURL String
  name    String
}

type GuildsGoodbyeEmbedFooter {
  iconURL String
  text    String
}

type GuildsLevels {
  channel String
  enabled Boolean
  message String
}

type GuildsLogs {
  channel String
  enabled Boolean
  webhook GuildsLogsWebhook
}

type GuildsLogsWebhook {
  id    String
  token String
}

type GuildsRoles {
  enabled   Boolean
  roleArray GuildsRolesRoleArray[]
}

type GuildsRolesRoleArray {
  description String
  emoji       String
  roleId      String
}

type GuildsTickets {
  assistantRole     String
  category          String
  channel           String
  embed             GuildsTicketsEmbed
  enabled           Boolean
  ticketHandlers    String
  transcriptChannel String
}

type GuildsTicketsEmbed {
  author         GuildsTicketsEmbedAuthor
  description    String
  footer         GuildsTicketsEmbedFooter
  /// Could not determine type: the field only had null or empty values in the sample set.
  image          Json?
  messagecontent String
  title          String
}

type GuildsTicketsEmbedAuthor {
  /// Could not determine type: the field only had null or empty values in the sample set.
  icon_url Json?
  name     String
}

type GuildsTicketsEmbedFooter {
  /// Could not determine type: the field only had null or empty values in the sample set.
  icon_url Json?
  text     String
}

type GuildsVerification {
  enabled Boolean
  role    String
}

type GuildsWelcome {
  channel String
  embed   GuildsWelcomeEmbed
  enabled Boolean
}

type GuildsWelcomeEmbed {
  author         GuildsWelcomeEmbedAuthor
  color          String
  content        String
  description    String
  footer         GuildsWelcomeEmbedFooter
  image          String
  messagecontent String
  thumbnail      String
  title          String
}

type GuildsWelcomeEmbedAuthor {
  iconURL String
  name    String
}

type GuildsWelcomeEmbedFooter {
  iconURL String
  text    String
}

type PlaylistsPlaylistData {
  author   String
  duration Int
  title    String
  uri      String
}

type RolesRoleArray {
  description String
  emoji       String
  roleId      String
}

model guilddbs {
  id String @id @default(auto()) @map("_id") @db.ObjectId
}

model guilds {
  id           String              @id @default(auto()) @map("_id") @db.ObjectId
  v            Int                 @map("__v")
  antiphishing GuildsAntiphishing?
  antiscam     GuildsAntiscam?
  blacklist    GuildsBlacklist?
  confessions  GuildsConfessions?
  goodbye      GuildsGoodbye?
  guildId      String
  levels       GuildsLevels?
  logs         GuildsLogs?
  roles        GuildsRoles?
  tickets      GuildsTickets?
  verification GuildsVerification?
  welcome      GuildsWelcome?
}

model levels {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  v           Int      @map("__v")
  guildID     String
  lastUpdated DateTime @db.Date
  level       Int
  userID      String
  xp          Int
}

model lockdowns {
  id String @id @default(auto()) @map("_id") @db.ObjectId
}

model playlists {
  id           String                  @id @default(auto()) @map("_id") @db.ObjectId
  v            Int                     @map("__v")
  created      Int
  name         String
  playlistData PlaylistsPlaylistData[]
  playlistName String
  userID       String
}

model reminders {
  id              String  @id @default(auto()) @map("_id") @db.ObjectId
  v               Int     @map("__v")
  channelId       String
  guildId         String
  hasBeenReminded Boolean
  messageId       String
  reminder        String
  /// Multiple data types found: Float: 80%, Int: 20% out of 5 sampled entries
  scheduledTime   Json
  userId          String
}

model rewards {
  id String @id @default(auto()) @map("_id") @db.ObjectId
}

model roles {
  id        String           @id @default(auto()) @map("_id") @db.ObjectId
  v         Int              @map("__v")
  id_       String           @map("id")
  panelName String
  roleArray RolesRoleArray[]
}

model stats {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  v      Int    @map("__v")
  guilds String
  id_    String @map("id")
  users  String
}

model tickets {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  v         Int     @map("__v")
  closed    Boolean
  closer    String
  creatorId String
  id_       String  @map("id")
  ticketId  String
}

model ublacklists {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  v      Int    @map("__v")
  reason String
  time   Float
}

model users {
  id           String @id @default(auto()) @map("_id") @db.ObjectId
  v            Int    @map("__v")
  accessToken  String
  refreshToken String
  userId       String @unique(map: "userId_1")
}
